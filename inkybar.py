import inkyphat

_c39 = {
    'A': [1,1,0,1,0,1,0,0,1,0,1,1,0],
    'B': [1,0,1,1,0,1,0,0,1,0,1,1,0],
    'C': [1,1,0,1,1,0,1,0,0,1,0,1,0],
    'D': [1,0,1,0,1,1,0,0,1,0,1,1,0],
    'E': [1,1,0,1,0,1,1,0,0,1,0,1,0],
    'F': [1,0,1,1,0,1,1,0,0,1,0,1,0],
    'G': [1,0,1,0,1,0,0,1,1,0,1,1,0],
    'H': [1,1,0,1,0,1,0,0,1,1,0,1,0],
    'I': [1,0,1,1,0,1,0,0,1,1,0,1,0],
    'J': [1,0,1,0,1,1,0,0,1,1,0,1,0],
    'K': [1,1,0,1,0,1,0,1,0,0,1,1,0],
    'L': [1,0,1,1,0,1,0,1,0,0,1,1,0],
    'M': [1,1,0,1,1,0,1,0,1,0,0,1,0],
    'N': [1,0,1,0,1,1,0,1,0,0,1,1,0],
    'O': [1,1,0,1,0,1,1,0,1,0,0,1,0],
    'P': [1,0,1,1,0,1,1,0,1,0,0,1,0],
    'Q': [1,0,1,0,1,0,1,1,0,0,1,1,0],
    'R': [1,1,0,1,0,1,0,1,1,0,0,1,0],
    'S': [1,0,1,1,0,1,0,1,1,0,0,1,0],
    'T': [1,0,1,0,1,1,0,1,1,0,0,1,0],
    'U': [1,1,0,0,1,0,1,0,1,0,1,1,0],
    'V': [1,0,0,1,1,0,1,0,1,0,1,1,0],
    'W': [1,1,0,0,1,1,0,1,0,1,0,1,0],
    'X': [1,0,0,1,0,1,1,0,1,0,1,1,0],
    'Y': [1,1,0,0,1,0,1,1,0,1,0,1,0],
    'Z': [1,0,0,1,1,0,1,1,0,1,0,1,0],
    ' ': [1,0,0,1,1,0,1,0,1,1,0,1,0],
    '0': [1,0,1,0,0,1,1,0,1,1,0,1,0],
    '1': [1,1,0,1,0,0,1,0,1,0,1,1,0],
    '2': [1,0,1,1,0,0,1,0,1,0,1,1,0],
    '3': [1,1,0,1,1,0,0,1,0,1,0,1,0],
    '4': [1,0,1,0,0,1,1,0,1,0,1,1,0],
    '5': [1,1,0,1,0,0,1,1,0,1,0,1,0],
    '6': [1,0,1,1,0,0,1,1,0,1,0,1,0],
    '7': [1,0,1,0,0,1,0,1,1,0,1,1,0],
    '8': [1,1,0,1,0,0,1,0,1,1,0,1,0],
    '9': [1,0,1,1,0,0,1,0,1,1,0,1,0],
    '-': [1,0,0,1,0,1,0,1,1,0,1,1,0],
    '$': [1,0,0,1,0,0,1,0,0,1,0,1,0],
    '%': [1,0,1,0,0,1,0,0,1,0,0,1,0],
    '.': [1,1,0,0,1,0,1,0,1,1,0,1,0],
    '/': [1,0,0,1,0,0,1,0,1,0,0,1,0],
    '+': [1,0,0,1,0,1,0,0,1,0,0,1,0],
    'START': [1,0,0,1,0,1,1,0,1,1,0,1,0],
    'STOP': [1,0,0,1,0,1,1,0,1,1,0,1],
    'PAD': [0,0,0,0,0,0,0,0,0,0,0,0],
}

def c39bits(text, smashCase=False):
    """
    Returns an array of 0s and 1s representing the (padded) code 39 barcode.
    If smashCase is true, it ignores case in doing so.
    Raises a ValueError if the text cannot be converted to code 39.
    """
    result = []
    result += _c39["PAD"]
    result += _c39["START"]
    
    _text = text
    
    if smashCase:
        _text = _text.upper()
        
    for c in _text:
        if c not in _c39.keys():
            raise ValueError("Character '" + c + "' is invalid in code 39")
        result += _c39[c]
    
    result += _c39["STOP"]
    result += _c39["PAD"]
    return result

def c39rect(text, xy=(None, None), smashCase=False, height=inkyphat.HEIGHT):
    """
    Draws a code-39 barcode. Set x or y to None to center on that axis.
    """
    bits = c39bits(text, smashCase)
    
    origX, origY = xy
    if origX == None:
        origX = int((inkyphat.WIDTH - len(bits))/2)
    if origY == None:
        origY = int((inkyphat.HEIGHT - height)/2)
    
    x = origX
    for bit in bits:
        inkyphat.line((x, origY, x, origY+height), bit)
        x+=1




















